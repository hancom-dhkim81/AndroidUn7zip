/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_hu_andun7z_AndUn7z */

#ifdef __cplusplus
extern "C" {
#endif

#include "JniWrapper.h"

JavaVM *javaVM;                      // Pointer to the JVM (Java Virtual Machine)
jobject acitvityObject;
jmethodID callback;

int myNativeMethod();

pFunc myCallback;

/*
 * Class:     com_hu_andun7z_AndUn7z
 * Method:    un7zip
 * Signature: (Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_hu_andun7z_AndUn7z_un7zip
(JNIEnv *env, jclass obj, jstring filePath, jstring outPath)
{
	env->GetJavaVM(&javaVM);

//	acitvityObject = env->NewGlobalRef(cls);

	// Get a reference to this object's class
	jclass thisClass = env->GetObjectClass(obj);
	jmethodID cb = env->GetMethodID(thisClass, "testCallback", "(Ljava/lang/String;)V");

	if (cb == NULL) {
		LOGE("callback is null");
		return -1;
	} else {
		LOGE("callback is not null");
	}


	const char* cfilePath = (const char*)env->GetStringUTFChars(filePath, NULL);
	const char* coutPath = (const char*)env->GetStringUTFChars(outPath, NULL);
	LOGD("start extract filePath[%s], outPath[%s]", cfilePath, coutPath);

	myCallback = myNativeMethod;

	jint ret = extract7z(cfilePath, coutPath, myCallback);
	LOGD("end extract");
	env->ReleaseStringUTFChars(filePath, cfilePath);
	env->ReleaseStringUTFChars(outPath, coutPath);
	return ret;
}

int myNativeMethod()
{
	JNIEnv *env;
	javaVM->AttachCurrentThread(&env, NULL);

	LOGD("call myNativeMethod");


	if (callback == NULL) {
		jclass thisClass = env->GetObjectClass(acitvityObject);
		callback = env->GetMethodID(thisClass, "testCallback", "(Ljava/lang/String)V");
		if (callback == NULL) {
			LOGE("callback is null ~~~~~~~~~~~~~~~~~~~~~");
			return -1;
		}

		env->CallVoidMethod(acitvityObject, callback, env->NewStringUTF("call testCallback()"));
	}

	return 0;
}

#ifdef __cplusplus
}
#endif
